Subject: [PATCH] Integrate DLL-based lyrics display plugin for Windows, adding support for loading `native.dll` and utilizing `SetConfig` for primary and translated lyrics.
---
Index: internal/ui/player.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/internal/ui/player.go b/internal/ui/player.go
--- a/internal/ui/player.go	(revision 39d9d224e454194d1c1e8fb797e8683b11fa0a0b)
+++ b/internal/ui/player.go	(date 1761908080854)
@@ -4,8 +4,11 @@
 	"context"
 	"fmt"
 	"log/slog"
+	"runtime"
 	"strconv"
+	"syscall"
 	"time"
+	"unsafe"
 
 	"github.com/anhoder/foxful-cli/model"
 	"github.com/go-musicfox/netease-music/service"
@@ -26,6 +29,60 @@
 	_struct "github.com/go-musicfox/go-musicfox/utils/struct"
 )
 
+// ==================== DLL Integration for Lyrics Display ====================
+var (
+	dllHandle     syscall.Handle
+	setConfigProc *syscall.Proc
+)
+
+// initLyricsPlugin 初始化歌词显示 DLL 插件
+func initLyricsPlugin() {
+	// 仅在 Windows 平台上加载
+	if runtime.GOOS != "windows" {
+		return
+	}
+
+	dll, err := syscall.LoadDLL("native.dll")
+	if err != nil {
+		slog.Warn("Failed to load native.dll", slog.Any("error", err))
+		return
+	}
+
+	// 获取 SetConfig 函数
+	proc, err := dll.FindProc("SetConfig")
+	if err != nil {
+		slog.Warn("Failed to find SetConfig in native.dll", slog.Any("error", err))
+		return
+	}
+
+	dllHandle = dll.Handle
+	setConfigProc = proc
+	slog.Info("Lyrics display plugin loaded successfully")
+}
+
+// sendLyricBySetConfig 通过 DLL SetConfig 函数发送歌词
+func sendLyricBySetConfig(content, transContent string) {
+	if setConfigProc == nil {
+		return
+	}
+
+	// 设置主歌词
+	if content != "" {
+		keyPtr, _ := syscall.UTF16PtrFromString("lyric_primary")
+		valPtr, _ := syscall.UTF16PtrFromString(content)
+		_, _, _ = setConfigProc.Call(uintptr(unsafe.Pointer(keyPtr)), uintptr(unsafe.Pointer(valPtr)))
+	}
+
+	// 设置副歌词（翻译/转录）
+	if transContent != "" {
+		keyPtr, _ := syscall.UTF16PtrFromString("lyric_secondary")
+		valPtr, _ := syscall.UTF16PtrFromString(transContent)
+		_, _, _ = setConfigProc.Call(uintptr(unsafe.Pointer(keyPtr)), uintptr(unsafe.Pointer(valPtr)))
+	}
+}
+
+// ==================== End of DLL Integration ====================
+
 // PlayDirection 下首歌的方向
 type PlayDirection uint8
 
@@ -86,7 +143,32 @@
 	reporter      reporter.Service
 }
 
+//var (
+//	// DLL 相关
+//	lyricsPlugin syscall.Handle
+//	setLyricFunc syscall.Proc
+//)
+//
+//func initLyricsPlugin() {
+//	// 仅在 Windows 下启用歌词插件
+//	if dll, err := syscall.LoadDLL("lyrics.dll");err==nil {
+//		lyricsPlugin = dll.Handle
+//		if proc, err := dll.FindProc("SetConfig"); err == nil {
+//			setLyricFunc = *proc
+//		}
+//	}
+//}
+//
+//func sendLyricToDll(content, transContent string) {
+//	if setLyricFunc == || setLyricFunc == syscall.Proc{} {
+//		return
+//	}
+//}
+
 func NewPlayer(n *Netease, lyricService *lyric.Service) *Player {
+	// 初始化歌词显示 DLL 插件
+	initLyricsPlugin()
+
 	reporterOptions := []reporter.Option{}
 	if configs.AppConfig.Reporter.Lastfm.Enable {
 		skipDjRadio := configs.AppConfig.Reporter.Lastfm.SkipDjRadio
